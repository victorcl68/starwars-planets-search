{"version":3,"sources":["hooks/IndexContext.js","components/InputFilterByName.js","components/InputFilterByNumber.js","components/PlanetsTable.js","services/RequestPlanets.js","hooks/Provider.js","App.js","index.js"],"names":["IndexContext","createContext","InputFilterByName","useContext","filters","setFilters","name","filterByName","htmlFor","value","type","id","data-testid","onChange","target","InputFilterByNumber","setUpdate","useState","column","comparison","changeFilters","setChangeFilters","handleChangeInputFilter","map","eachColumn","index","key","eachComparison","onClick","numberValues","filterByNumericValue","PlanetsTable","data","length","resultKeys","Object","keys","eachResultKey","filter","eachData","toUpperCase","includes","planets","resultKey","RequestPlanets","a","fetch","planetsFetch","json","results","console","log","StarWarsPlanetsProvider","children","setData","update","filteringPlanets","useCallback","filtereData","Number","useEffect","allPlanets","planet","residents","FetchPlanets","contextValue","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70642daf.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst IndexContext = createContext();\n\nexport default IndexContext;\n","import React, { useContext } from 'react';\n\nimport IndexContext from '../hooks/IndexContext';\n\nexport default function InputFilterByName() {\n  const { filters, setFilters,\n    filters: { filterByName: { name } } } = useContext(IndexContext);\n\n  const handleChange = ({ target }) => {\n    setFilters({ ...filters, filterByName: { name: target.value } });\n  };\n\n  return (\n    <label htmlFor=\"InputFilterByName\">\n      Filtragem por nome:\n      <input\n        value={ name }\n        type=\"text\"\n        id=\"InputFilterByName\"\n        data-testid=\"name-filter\"\n        onChange={ handleChange }\n      />\n    </label>\n  );\n}\n","import React, { useContext, useState } from 'react';\n\nimport IndexContext from '../hooks/IndexContext';\n\nexport default function InputFilterByNumber() {\n  const { setFilters, setUpdate, filters } = useContext(IndexContext);\n  const [changeFilters, setChangeFilters] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: 0,\n  });\n\n  const handleChangeInputFilter = ({ target: { name, value } }) => {\n    setChangeFilters({ ...changeFilters, [name]: value });\n  };\n\n  const handleClick = (numberValues) => {\n    setFilters(\n      { ...filters,\n        filterByNumericValue: [...filters.filterByNumericValue, numberValues] },\n    );\n    setUpdate(true);\n  };\n\n  const columnArray = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n  const comparisonArray = ['maior que', 'menor que', 'igual a'];\n\n  return (\n    <section>\n      <label htmlFor=\"column\">\n        Colunas:\n        <select\n          id=\"column\"\n          name=\"column\"\n          data-testid=\"column-filter\"\n          onChange={ handleChangeInputFilter }\n        >\n          {columnArray.map((eachColumn, index) => (\n            <option\n              key={ index }\n              value={ eachColumn }\n            >\n              {eachColumn}\n            </option>\n          ))}\n        </select>\n      </label>\n      <label htmlFor=\"comparison\">\n        Comparadores:\n        <select\n          id=\"comparison\"\n          name=\"comparison\"\n          data-testid=\"comparison-filter\"\n          onChange={ handleChangeInputFilter }\n        >\n          {comparisonArray.map((eachComparison, index) => (\n            <option\n              key={ index }\n              value={ eachComparison }\n            >\n              {eachComparison}\n            </option>\n          ))}\n        </select>\n      </label>\n      <label htmlFor=\"value\">\n        Valor:\n        <input\n          id=\"value\"\n          type=\"number\"\n          name=\"value\"\n          data-testid=\"value-filter\"\n          onChange={ handleChangeInputFilter }\n        />\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ () => handleClick(changeFilters) }\n      >\n        Filtre!\n      </button>\n    </section>\n  );\n}\n","import React, { useContext } from 'react';\n\nimport IndexContext from '../hooks/IndexContext';\nimport InputFilterByName from './InputFilterByName';\nimport InputFilterByNumber from './InputFilterByNumber';\n\nexport default function PlanetsTable() {\n  const { data, filters: { filterByName: { name } } } = useContext(IndexContext);\n\n  if (data.length > 0) {\n    const resultKeys = Object.keys(data[0]);\n\n    return (\n      <section>\n        <InputFilterByName />\n        <InputFilterByNumber />\n        <table>\n          <caption>StarsWars Planets</caption>\n          <thead>\n            <tr>\n              {resultKeys.map((eachResultKey) => (\n                <th key={ eachResultKey }>\n                  {eachResultKey}\n                </th>))}\n            </tr>\n          </thead>\n          <tbody>\n            {data.filter((eachData) => (eachData.name\n              .toUpperCase().includes(name.toUpperCase())))\n              .map((planets, index) => (\n                <tr key={ index }>\n                  {resultKeys.map((resultKey) => (\n                    <td key={ resultKey }>\n                      {planets[resultKey]}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n\n  return <section>Loading...</section>;\n}\n","export default async function RequestPlanets() {\n  try {\n    const planetsFetch = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n    const planets = await planetsFetch.json();\n    return planets.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { PropTypes } from 'prop-types';\n\nimport IndexContext from './IndexContext';\nimport RequestPlanets from '../services/RequestPlanets';\n\nexport default function StarWarsPlanetsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [update, setUpdate] = useState(false);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValue: [],\n  });\n\n  const filteringPlanets = useCallback(() => {\n    const { column, comparison, value } = filters.filterByNumericValue[0];\n\n    const filtereData = data.filter((eachData) => {\n      if (comparison === 'maior que') {\n        return Number(eachData[column]) > Number(value);\n      }\n      if (comparison === 'menor que') {\n        return Number(eachData[column]) < Number(value);\n      }\n      return Number(eachData[column]) === Number(value);\n    });\n    setData(filtereData);\n  }, [data, filters]);\n\n  useEffect(() => {\n    if (update === true) {\n      filteringPlanets();\n    }\n    setUpdate(false);\n  }, [filteringPlanets, update]);\n  // useCallBack e l√≥gica dos Updates foi aprendido com Lara Karoline:\n  // https://github.com/tryber/sd-010-b-project-starwars-planets-search/pull/49\n\n  useEffect(() => {\n    async function FetchPlanets() {\n      const allPlanets = await RequestPlanets();\n      allPlanets.map((planet) => delete planet.residents);\n      setData(allPlanets);\n    }\n    FetchPlanets();\n  }, []);\n\n  const contextValue = {\n    data,\n    filters,\n    setFilters,\n    setUpdate,\n  };\n\n  return (\n    <IndexContext.Provider value={ contextValue }>\n      { children }\n    </IndexContext.Provider>\n  );\n}\n\nStarWarsPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  // Como dar um propType para um children:\n  // https://stackoverflow.com/questions/42122522/reactjs-what-should-the-proptypes-be-for-this-props-children\n};\n","import React from 'react';\n\nimport PlanetsTable from './components/PlanetsTable';\nimport StarWarsPlanetsProvider from './hooks/Provider';\n\nfunction App() {\n  return (\n    <main>\n      <StarWarsPlanetsProvider>\n        <PlanetsTable />\n      </StarWarsPlanetsProvider>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}